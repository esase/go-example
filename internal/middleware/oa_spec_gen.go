// Package middleware provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package middleware

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
