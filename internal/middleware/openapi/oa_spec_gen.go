// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
